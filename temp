import * as anchor from "@project-serum/anchor";
import { Program } from "@project-serum/anchor";
import { MintNftNew } from "../target/types/mint_nft_new";
//this is the idl, if you are from the EVM ecosystem, we call it the contract abi
//this allows us to use our program/smart contract as a type script object

describe("mint-nft-new", () => {

  //setting test params
  const testNftTitle = "Devfolio NFT!";
  const testNftSymbol = "DVFLxSOL";
  const testNftUri = "https://raw.githubusercontent.com/ANMOLCODES/candy-machine-ui-sugar-test/master/example.json"

  // Configure the client to use the local cluster.
  const provider = anchor.AnchorProvider.env();
  const wallet = provider.wallet as anchor.Wallet;
  anchor.setProvider(provider);

  const program = anchor.workspace.MintNftNew as anchor.Program<MintNftNew>; 
  //pulling this from the idl that we brought in at the top of the test file

  const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(
    "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
  );
  //just the program id for token metadata of metaplex, publicly available

  it("Mint!", async () => {
    //Derive the mint address and the associated token account address

    const mintKeypair: anchor.web3.Keypair = anchor.web3.Keypair.generate();
    const tokenAddress = await anchor.utils.token.associatedAddress({
      mint: mintKeypair.publicKey,
      owner: wallet.publicKey,
    }); // this gives us what the token address should actually be
    console.log(`New token: ${mintKeypair.publicKey}`);

    //Derive the metadata and master edition addresses

    const metadataAddress = (await anchor.web3.PublicKey.findProgramAddress(
      [
        Buffer.from("metadata"),
        TOKEN_METADATA_PROGRAM_ID.toBuffer(),
        mintKeypair.publicKey.toBuffer(),
      ],
      TOKEN_METADATA_PROGRAM_ID
    ))[0];    
    console.log("Metadata initialized");

    const masterEditionAddress = (await anchor.web3.PublicKey.findProgramAddress(
      [
        Buffer.from("metadata"),
        TOKEN_METADATA_PROGRAM_ID.toBuffer(),
        mintKeypair.publicKey.toBuffer(),
        Buffer.from("edition"),
      ],
      TOKEN_METADATA_PROGRAM_ID
    ))[0];
    console.log("Master edition metadata initialized");

    //Transact with mint function in our on-chain program
    // in lib.rs, our mint function takes the context and the metadata parameters
    // in .accounts all we are doing is providing the pubkey of all accounts
    // you might be thinking that these are not all the addresses from the lib.rs struct?
    // well anchor resolves the rent, system_program, token_program and associated_token_program itself
    await program.methods.mint(
      testNftTitle, testNftSymbol, testNftUri
    )
    .accounts({
      masterEdition: masterEditionAddress,
      metadata: metadataAddress,
      mint: mintKeypair.publicKey,
      tokenAccount: tokenAddress,
      mintAuthority: wallet.publicKey,
      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,
    })
    .signers([mintKeypair])
    .rpc();
  });
});
